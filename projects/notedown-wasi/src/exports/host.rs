// Generated by `wit-bindgen` 0.23.0. DO NOT EDIT!
// Options used:
#[allow(dead_code)]
pub mod exports {
    #[allow(dead_code)]
    pub mod notedown {
        #[allow(dead_code)]
        pub mod core {
            #[allow(dead_code, clippy::all)]
            pub mod types {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;

                use super::super::super::super::_rt;

                #[derive(Debug)]
                #[repr(transparent)]
                pub struct Url {
                    handle: _rt::Resource<Url>,
                }

                type _UrlRep<T> = Option<T>;

                impl Url {
                    /// Creates a new resource from the specified
                    /// representation.
                    ///
                    /// This function will create a new resource handle by
                    /// moving `val` onto the heap and then
                    /// passing that heap pointer to the component model to
                    /// create a handle. The owned handle is then returned as
                    /// `Url`.
                    pub fn new<T: GuestUrl>(val: T) -> Self {
                        Self::type_guard::<T>();
                        let val: _UrlRep<T> = Some(val);
                        let ptr: *mut _UrlRep<T> = _rt::Box::into_raw(_rt::Box::new(val));
                        unsafe { Self::from_handle(T::_resource_new(ptr.cast())) }
                    }

                    /// Gets access to the underlying `T` which represents this
                    /// resource.
                    pub fn get<T: GuestUrl>(&self) -> &T {
                        let ptr = unsafe { &*self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    /// Gets mutable access to the underlying `T` which
                    /// represents this resource.
                    pub fn get_mut<T: GuestUrl>(&mut self) -> &mut T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_mut().unwrap()
                    }

                    /// Consumes this resource and returns the underlying `T`.
                    pub fn into_inner<T: GuestUrl>(self) -> T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.take().unwrap()
                    }

                    #[doc(hidden)]
                    pub unsafe fn from_handle(handle: u32) -> Self {
                        Self { handle: _rt::Resource::from_handle(handle) }
                    }

                    #[doc(hidden)]
                    pub fn take_handle(&self) -> u32 {
                        _rt::Resource::take_handle(&self.handle)
                    }

                    #[doc(hidden)]
                    pub fn handle(&self) -> u32 {
                        _rt::Resource::handle(&self.handle)
                    }

                    // It's theoretically possible to implement the `GuestUrl` trait twice
                    // so guard against using it with two different types here.
                    #[doc(hidden)]
                    fn type_guard<T: 'static>() {
                        use core::any::TypeId;
                        static mut LAST_TYPE: Option<TypeId> = None;
                        unsafe {
                            assert!(!cfg!(target_feature = "threads"));
                            let id = TypeId::of::<T>();
                            match LAST_TYPE {
                                Some(ty) => assert!(ty == id, "cannot use two types with this resource type"),
                                None => LAST_TYPE = Some(id),
                            }
                        }
                    }

                    #[doc(hidden)]
                    pub unsafe fn dtor<T: 'static>(handle: *mut u8) {
                        Self::type_guard::<T>();
                        let _ = _rt::Box::from_raw(handle as *mut _UrlRep<T>);
                    }

                    fn as_ptr<T: GuestUrl>(&self) -> *mut _UrlRep<T> {
                        Url::type_guard::<T>();
                        T::_resource_rep(self.handle()).cast()
                    }
                }

                /// A borrowed version of [`Url`] which represents a borrowed
                /// value with the lifetime `'a`.
                #[derive(Debug)]
                #[repr(transparent)]
                pub struct UrlBorrow<'a> {
                    rep: *mut u8,
                    _marker: core::marker::PhantomData<&'a Url>,
                }

                impl<'a> UrlBorrow<'a> {
                    #[doc(hidden)]
                    pub unsafe fn lift(rep: usize) -> Self {
                        Self { rep: rep as *mut u8, _marker: core::marker::PhantomData }
                    }

                    /// Gets access to the underlying `T` in this resource.
                    pub fn get<T: GuestUrl>(&self) -> &T {
                        let ptr = unsafe { &mut *self.as_ptr::<T>() };
                        ptr.as_ref().unwrap()
                    }

                    // NB: mutable access is not allowed due to the component model allowing
                    // multiple borrows of the same resource.

                    fn as_ptr<T: 'static>(&self) -> *mut _UrlRep<T> {
                        Url::type_guard::<T>();
                        self.rep.cast()
                    }
                }

                unsafe impl _rt::WasmResource for Url {
                    #[inline]
                    unsafe fn drop(_handle: u32) {
                        #[cfg(not(target_arch = "wasm32"))]
                        unreachable!();

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]notedown:core/types@0.1.0")]
                            extern "C" {
                                #[link_name = "[resource-drop]url"]
                                fn drop(_: u32);
                            }

                            drop(_handle);
                        }
                    }
                }

                #[repr(C)]
                #[derive(Clone, Copy)]
                pub struct TextRange {
                    pub head_offset: u32,
                    pub tail_offset: u32,
                }

                impl ::core::fmt::Debug for TextRange {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("TextRange").field("head-offset", &self.head_offset).field("tail-offset", &self.tail_offset).finish()
                    }
                }

                pub trait Guest {
                    type Url: GuestUrl;
                }

                pub trait GuestUrl: 'static {
                    #[doc(hidden)]
                    unsafe fn _resource_new(val: *mut u8) -> u32
                        where
                            Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = val;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]notedown:core/types@0.1.0")]
                            extern "C" {
                                #[link_name = "[resource-new]url"]
                                fn new(_: *mut u8) -> u32;
                            }
                            new(val)
                        }
                    }

                    #[doc(hidden)]
                    fn _resource_rep(handle: u32) -> *mut u8
                        where
                            Self: Sized,
                    {
                        #[cfg(not(target_arch = "wasm32"))]
                        {
                            let _ = handle;
                            unreachable!();
                        }

                        #[cfg(target_arch = "wasm32")]
                        {
                            #[link(wasm_import_module = "[export]notedown:core/types@0.1.0")]
                            extern "C" {
                                #[link_name = "[resource-rep]url"]
                                fn rep(_: u32) -> *mut u8;
                            }
                            unsafe { rep(handle) }
                        }
                    }
                }
                #[doc(hidden)]

                macro_rules! __export_notedown_core_types_0_1_0_cabi {
          ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {


            const _: () = {
              #[doc(hidden)]
              #[export_name = "notedown:core/types@0.1.0#[dtor]url"]
              #[allow(non_snake_case)]
              unsafe extern "C" fn dtor(rep: *mut u8) {
                $($path_to_types)*::Url::dtor::<
                <$ty as $($path_to_types)*::Guest>::Url
                >(rep)
              }
            };

          };);
        }
                #[doc(hidden)]
                pub(crate) use __export_notedown_core_types_0_1_0_cabi;
            }

            #[allow(dead_code, clippy::all)]
            pub mod syntax_tree {
                #[used]
                #[doc(hidden)]
                #[cfg(target_arch = "wasm32")]
                static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_custom_section_describing_imports;

                use super::super::super::super::_rt;

                pub type TextRange = super::super::super::super::exports::notedown::core::types::TextRange;
                pub type Url = super::super::super::super::exports::notedown::core::types::Url;
                pub type UrlBorrow<'a> = super::super::super::super::exports::notedown::core::types::UrlBorrow<'a>;

                /// === line breaks ===
                /// -----------------------------------------------------------------------------
                /// The line break block
                /// ```note
                /// ===
                /// ````
                #[repr(C)]
                #[derive(Clone, Copy)]
                pub struct HorizontalRule {
                    pub lines: u32,
                    pub range: TextRange,
                }

                impl ::core::fmt::Debug for HorizontalRule {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("HorizontalRule").field("lines", &self.lines).field("range", &self.range).finish()
                    }
                }

                #[repr(C)]
                #[derive(Clone, Copy)]
                pub struct BreaklineBlock {
                    pub lines: u32,
                    pub range: TextRange,
                }

                impl ::core::fmt::Debug for BreaklineBlock {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("BreaklineBlock").field("lines", &self.lines).field("range", &self.range).finish()
                    }
                }

                /// The math text written in the paragraph
                ///
                /// ### Example
                /// ````note
                /// ```language
                /// highlight
                /// ```
                /// ````
                #[derive(Clone)]
                pub struct CodeHighlight {
                    pub language: _rt::String,
                    pub range: TextRange,
                }

                impl ::core::fmt::Debug for CodeHighlight {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("CodeHighlight").field("language", &self.language).field("range", &self.range).finish()
                    }
                }

                #[derive(Clone)]
                pub enum CodeAction {
                    Highlight(CodeHighlight),
                }

                impl ::core::fmt::Debug for CodeAction {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        match self {
                            CodeAction::Highlight(e) => f.debug_tuple("CodeAction::Highlight").field(e).finish(),
                        }
                    }
                }

                /// === line breaks ===
                /// -----------------------------------------------------------------------------
                /// The math text written in the paragraph
                ///
                /// ### Example
                /// ````note
                /// ```code(key: args)
                /// ```
                /// ````
                #[derive(Clone)]
                pub struct CodeSpan {
                    pub action: CodeAction,
                    pub lines: _rt::String,
                    pub range: TextRange,
                }

                impl ::core::fmt::Debug for CodeSpan {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("CodeSpan")
                            .field("action", &self.action)
                            .field("lines", &self.lines)
                            .field("range", &self.range)
                            .finish()
                    }
                }

                #[derive(Clone, Copy)]
                pub enum MathDisplay {
                    Inline,
                    Block,
                }

                impl ::core::fmt::Debug for MathDisplay {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        match self {
                            MathDisplay::Inline => f.debug_tuple("MathDisplay::Inline").finish(),
                            MathDisplay::Block => f.debug_tuple("MathDisplay::Block").finish(),
                        }
                    }
                }

                #[derive(Clone)]
                pub enum MathContent {
                    /// MathML element
                    Mathml(_rt::String),
                    /// TeX ompatible formulas, including `mathjax` and `katex`
                    Tex(_rt::String),
                    Asciimath(_rt::String),
                }

                impl ::core::fmt::Debug for MathContent {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        match self {
                            MathContent::Mathml(e) => f.debug_tuple("MathContent::Mathml").field(e).finish(),
                            MathContent::Tex(e) => f.debug_tuple("MathContent::Tex").field(e).finish(),
                            MathContent::Asciimath(e) => f.debug_tuple("MathContent::Asciimath").field(e).finish(),
                        }
                    }
                }

                /// === line breaks ===
                /// -----------------------------------------------------------------------------
                /// The math text written in the paragraph
                ///
                /// ### Example
                /// ```note
                /// The naunce of the universe is $6.022\times 10^{23}$
                /// ```
                #[derive(Clone)]
                pub struct MathSpan {
                    pub display: MathDisplay,
                    pub content: MathContent,
                    pub range: TextRange,
                }

                impl ::core::fmt::Debug for MathSpan {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("MathSpan")
                            .field("display", &self.display)
                            .field("content", &self.content)
                            .field("range", &self.range)
                            .finish()
                    }
                }

                #[derive(Clone)]
                pub enum ParagraphType {
                    Text(_rt::String),
                    Math(MathSpan),
                    Code(CodeSpan),
                }

                impl ::core::fmt::Debug for ParagraphType {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        match self {
                            ParagraphType::Text(e) => f.debug_tuple("ParagraphType::Text").field(e).finish(),
                            ParagraphType::Math(e) => f.debug_tuple("ParagraphType::Math").field(e).finish(),
                            ParagraphType::Code(e) => f.debug_tuple("ParagraphType::Code").field(e).finish(),
                        }
                    }
                }

                #[derive(Clone)]
                pub struct ParagraphTerm {
                    pub type_: ParagraphType,
                    pub range: TextRange,
                }

                impl ::core::fmt::Debug for ParagraphTerm {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("ParagraphTerm").field("type", &self.type_).field("range", &self.range).finish()
                    }
                }

                #[derive(Clone)]
                pub struct ParagraphBlock {
                    pub terms: _rt::Vec<ParagraphTerm>,
                    pub range: TextRange,
                }

                impl ::core::fmt::Debug for ParagraphBlock {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("ParagraphBlock").field("terms", &self.terms).field("range", &self.range).finish()
                    }
                }

                /// === title block ===
                /// -----------------------------------------------------------------------------
                #[derive(Clone)]
                pub struct HeadingBlock {
                    pub level: u32,
                    pub title: ParagraphBlock,
                    pub range: TextRange,
                }

                impl ::core::fmt::Debug for HeadingBlock {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("HeadingBlock")
                            .field("level", &self.level)
                            .field("title", &self.title)
                            .field("range", &self.range)
                            .finish()
                    }
                }

                #[derive(Clone)]
                pub enum BlockType {
                    Heading(HeadingBlock),
                    HorizontalRule(HorizontalRule),
                    Paragraph(ParagraphBlock),
                    SpaceBreak(BreaklineBlock),
                    CodeBlock(CodeSpan),
                    MathBlock(MathSpan),
                }

                impl ::core::fmt::Debug for BlockType {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        match self {
                            BlockType::Heading(e) => f.debug_tuple("BlockType::Heading").field(e).finish(),
                            BlockType::HorizontalRule(e) => f.debug_tuple("BlockType::HorizontalRule").field(e).finish(),
                            BlockType::Paragraph(e) => f.debug_tuple("BlockType::Paragraph").field(e).finish(),
                            BlockType::SpaceBreak(e) => f.debug_tuple("BlockType::SpaceBreak").field(e).finish(),
                            BlockType::CodeBlock(e) => f.debug_tuple("BlockType::CodeBlock").field(e).finish(),
                            BlockType::MathBlock(e) => f.debug_tuple("BlockType::MathBlock").field(e).finish(),
                        }
                    }
                }

                #[derive(Clone)]
                pub struct NotedownBlock {
                    pub type_: BlockType,
                    pub range: TextRange,
                }

                impl ::core::fmt::Debug for NotedownBlock {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("NotedownBlock").field("type", &self.type_).field("range", &self.range).finish()
                    }
                }

                pub struct NotedownRoot {
                    pub blocks: _rt::Vec<NotedownBlock>,
                    pub path: Option<Url>,
                }

                impl ::core::fmt::Debug for NotedownRoot {
                    fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
                        f.debug_struct("NotedownRoot").field("blocks", &self.blocks).field("path", &self.path).finish()
                    }
                }

                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn _export_hack_unused_cabi<T: Guest>() -> *mut u8 {
                    #[cfg(target_arch = "wasm32")]
                    _rt::run_ctors_once();
                    let result0 = T::hack_unused();
                    let ptr1 = _RET_AREA.0.as_mut_ptr().cast::<u8>();
                    let NotedownRoot { blocks: blocks2, path: path2 } = result0;
                    let vec56 = blocks2;
                    let len56 = vec56.len();
                    let layout56 = _rt::alloc::Layout::from_size_align_unchecked(vec56.len() * 48, 4);
                    let result56 = if layout56.size() != 0 {
                        let ptr = _rt::alloc::alloc(layout56).cast::<u8>();
                        if ptr.is_null() {
                            _rt::alloc::handle_alloc_error(layout56);
                        }
                        ptr
                    } else {
                        { ::core::ptr::null_mut() }
                    };
                    for (i, e) in vec56.into_iter().enumerate() {
                        let base = result56.add(i * 48);
                        {
                            let NotedownBlock { type_: type_3, range: range3 } = e;
                            match type_3 {
                                BlockType::Heading(e) => {
                                    *base.add(0).cast::<u8>() = (0i32) as u8;
                                    let HeadingBlock { level: level4, title: title4, range: range4 } = e;
                                    *base.add(4).cast::<i32>() = _rt::as_i32(level4);
                                    let ParagraphBlock { terms: terms5, range: range5 } = title4;
                                    let vec20 = terms5;
                                    let len20 = vec20.len();
                                    let layout20 = _rt::alloc::Layout::from_size_align_unchecked(vec20.len() * 48, 4);
                                    let result20 = if layout20.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout20).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout20);
                                        }
                                        ptr
                                    } else {
                                        { ::core::ptr::null_mut() }
                                    };
                                    for (i, e) in vec20.into_iter().enumerate() {
                                        let base = result20.add(i * 48);
                                        {
                                            let ParagraphTerm { type_: type_6, range: range6 } = e;
                                            match type_6 {
                                                ParagraphType::Text(e) => {
                                                    *base.add(0).cast::<u8>() = (0i32) as u8;
                                                    let vec7 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr7 = vec7.as_ptr().cast::<u8>();
                                                    let len7 = vec7.len();
                                                    ::core::mem::forget(vec7);
                                                    *base.add(8).cast::<usize>() = len7;
                                                    *base.add(4).cast::<*mut u8>() = ptr7.cast_mut();
                                                }
                                                ParagraphType::Math(e) => {
                                                    *base.add(0).cast::<u8>() = (1i32) as u8;
                                                    let MathSpan { display: display8, content: content8, range: range8 } = e;
                                                    match display8 {
                                                        MathDisplay::Inline => {
                                                            *base.add(4).cast::<u8>() = (0i32) as u8;
                                                        }
                                                        MathDisplay::Block => {
                                                            *base.add(4).cast::<u8>() = (1i32) as u8;
                                                        }
                                                    }
                                                    match content8 {
                                                        MathContent::Mathml(e) => {
                                                            *base.add(8).cast::<u8>() = (0i32) as u8;
                                                            let vec9 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr9 = vec9.as_ptr().cast::<u8>();
                                                            let len9 = vec9.len();
                                                            ::core::mem::forget(vec9);
                                                            *base.add(16).cast::<usize>() = len9;
                                                            *base.add(12).cast::<*mut u8>() = ptr9.cast_mut();
                                                        }
                                                        MathContent::Tex(e) => {
                                                            *base.add(8).cast::<u8>() = (1i32) as u8;
                                                            let vec10 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr10 = vec10.as_ptr().cast::<u8>();
                                                            let len10 = vec10.len();
                                                            ::core::mem::forget(vec10);
                                                            *base.add(16).cast::<usize>() = len10;
                                                            *base.add(12).cast::<*mut u8>() = ptr10.cast_mut();
                                                        }
                                                        MathContent::Asciimath(e) => {
                                                            *base.add(8).cast::<u8>() = (2i32) as u8;
                                                            let vec11 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr11 = vec11.as_ptr().cast::<u8>();
                                                            let len11 = vec11.len();
                                                            ::core::mem::forget(vec11);
                                                            *base.add(16).cast::<usize>() = len11;
                                                            *base.add(12).cast::<*mut u8>() = ptr11.cast_mut();
                                                        }
                                                    }
                                                    let super::super::super::super::exports::notedown::core::types::TextRange {
                                                        head_offset: head_offset12,
                                                        tail_offset: tail_offset12,
                                                    } = range8;
                                                    *base.add(20).cast::<i32>() = _rt::as_i32(head_offset12);
                                                    *base.add(24).cast::<i32>() = _rt::as_i32(tail_offset12);
                                                }
                                                ParagraphType::Code(e) => {
                                                    *base.add(0).cast::<u8>() = (2i32) as u8;
                                                    let CodeSpan { action: action13, lines: lines13, range: range13 } = e;
                                                    match action13 {
                                                        CodeAction::Highlight(e) => {
                                                            *base.add(4).cast::<u8>() = (0i32) as u8;
                                                            let CodeHighlight { language: language14, range: range14 } = e;
                                                            let vec15 = (language14.into_bytes()).into_boxed_slice();
                                                            let ptr15 = vec15.as_ptr().cast::<u8>();
                                                            let len15 = vec15.len();
                                                            ::core::mem::forget(vec15);
                                                            *base.add(12).cast::<usize>() = len15;
                                                            *base.add(8).cast::<*mut u8>() = ptr15.cast_mut();
                                                            let super::super::super::super::exports::notedown::core::types::TextRange {
                                                                head_offset: head_offset16,
                                                                tail_offset: tail_offset16,
                                                            } = range14;
                                                            *base.add(16).cast::<i32>() = _rt::as_i32(head_offset16);
                                                            *base.add(20).cast::<i32>() = _rt::as_i32(tail_offset16);
                                                        }
                                                    }
                                                    let vec17 = (lines13.into_bytes()).into_boxed_slice();
                                                    let ptr17 = vec17.as_ptr().cast::<u8>();
                                                    let len17 = vec17.len();
                                                    ::core::mem::forget(vec17);
                                                    *base.add(28).cast::<usize>() = len17;
                                                    *base.add(24).cast::<*mut u8>() = ptr17.cast_mut();
                                                    let super::super::super::super::exports::notedown::core::types::TextRange {
                                                        head_offset: head_offset18,
                                                        tail_offset: tail_offset18,
                                                    } = range13;
                                                    *base.add(32).cast::<i32>() = _rt::as_i32(head_offset18);
                                                    *base.add(36).cast::<i32>() = _rt::as_i32(tail_offset18);
                                                }
                                            }
                                            let super::super::super::super::exports::notedown::core::types::TextRange {
                                                head_offset: head_offset19,
                                                tail_offset: tail_offset19,
                                            } = range6;
                                            *base.add(40).cast::<i32>() = _rt::as_i32(head_offset19);
                                            *base.add(44).cast::<i32>() = _rt::as_i32(tail_offset19);
                                        }
                                    }
                                    *base.add(12).cast::<usize>() = len20;
                                    *base.add(8).cast::<*mut u8>() = result20;
                                    let super::super::super::super::exports::notedown::core::types::TextRange {
                                        head_offset: head_offset21,
                                        tail_offset: tail_offset21,
                                    } = range5;
                                    *base.add(16).cast::<i32>() = _rt::as_i32(head_offset21);
                                    *base.add(20).cast::<i32>() = _rt::as_i32(tail_offset21);
                                    let super::super::super::super::exports::notedown::core::types::TextRange {
                                        head_offset: head_offset22,
                                        tail_offset: tail_offset22,
                                    } = range4;
                                    *base.add(24).cast::<i32>() = _rt::as_i32(head_offset22);
                                    *base.add(28).cast::<i32>() = _rt::as_i32(tail_offset22);
                                }
                                BlockType::HorizontalRule(e) => {
                                    *base.add(0).cast::<u8>() = (1i32) as u8;
                                    let HorizontalRule { lines: lines23, range: range23 } = e;
                                    *base.add(4).cast::<i32>() = _rt::as_i32(lines23);
                                    let super::super::super::super::exports::notedown::core::types::TextRange {
                                        head_offset: head_offset24,
                                        tail_offset: tail_offset24,
                                    } = range23;
                                    *base.add(8).cast::<i32>() = _rt::as_i32(head_offset24);
                                    *base.add(12).cast::<i32>() = _rt::as_i32(tail_offset24);
                                }
                                BlockType::Paragraph(e) => {
                                    *base.add(0).cast::<u8>() = (2i32) as u8;
                                    let ParagraphBlock { terms: terms25, range: range25 } = e;
                                    let vec40 = terms25;
                                    let len40 = vec40.len();
                                    let layout40 = _rt::alloc::Layout::from_size_align_unchecked(vec40.len() * 48, 4);
                                    let result40 = if layout40.size() != 0 {
                                        let ptr = _rt::alloc::alloc(layout40).cast::<u8>();
                                        if ptr.is_null() {
                                            _rt::alloc::handle_alloc_error(layout40);
                                        }
                                        ptr
                                    } else {
                                        { ::core::ptr::null_mut() }
                                    };
                                    for (i, e) in vec40.into_iter().enumerate() {
                                        let base = result40.add(i * 48);
                                        {
                                            let ParagraphTerm { type_: type_26, range: range26 } = e;
                                            match type_26 {
                                                ParagraphType::Text(e) => {
                                                    *base.add(0).cast::<u8>() = (0i32) as u8;
                                                    let vec27 = (e.into_bytes()).into_boxed_slice();
                                                    let ptr27 = vec27.as_ptr().cast::<u8>();
                                                    let len27 = vec27.len();
                                                    ::core::mem::forget(vec27);
                                                    *base.add(8).cast::<usize>() = len27;
                                                    *base.add(4).cast::<*mut u8>() = ptr27.cast_mut();
                                                }
                                                ParagraphType::Math(e) => {
                                                    *base.add(0).cast::<u8>() = (1i32) as u8;
                                                    let MathSpan { display: display28, content: content28, range: range28 } = e;
                                                    match display28 {
                                                        MathDisplay::Inline => {
                                                            *base.add(4).cast::<u8>() = (0i32) as u8;
                                                        }
                                                        MathDisplay::Block => {
                                                            *base.add(4).cast::<u8>() = (1i32) as u8;
                                                        }
                                                    }
                                                    match content28 {
                                                        MathContent::Mathml(e) => {
                                                            *base.add(8).cast::<u8>() = (0i32) as u8;
                                                            let vec29 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr29 = vec29.as_ptr().cast::<u8>();
                                                            let len29 = vec29.len();
                                                            ::core::mem::forget(vec29);
                                                            *base.add(16).cast::<usize>() = len29;
                                                            *base.add(12).cast::<*mut u8>() = ptr29.cast_mut();
                                                        }
                                                        MathContent::Tex(e) => {
                                                            *base.add(8).cast::<u8>() = (1i32) as u8;
                                                            let vec30 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr30 = vec30.as_ptr().cast::<u8>();
                                                            let len30 = vec30.len();
                                                            ::core::mem::forget(vec30);
                                                            *base.add(16).cast::<usize>() = len30;
                                                            *base.add(12).cast::<*mut u8>() = ptr30.cast_mut();
                                                        }
                                                        MathContent::Asciimath(e) => {
                                                            *base.add(8).cast::<u8>() = (2i32) as u8;
                                                            let vec31 = (e.into_bytes()).into_boxed_slice();
                                                            let ptr31 = vec31.as_ptr().cast::<u8>();
                                                            let len31 = vec31.len();
                                                            ::core::mem::forget(vec31);
                                                            *base.add(16).cast::<usize>() = len31;
                                                            *base.add(12).cast::<*mut u8>() = ptr31.cast_mut();
                                                        }
                                                    }
                                                    let super::super::super::super::exports::notedown::core::types::TextRange {
                                                        head_offset: head_offset32,
                                                        tail_offset: tail_offset32,
                                                    } = range28;
                                                    *base.add(20).cast::<i32>() = _rt::as_i32(head_offset32);
                                                    *base.add(24).cast::<i32>() = _rt::as_i32(tail_offset32);
                                                }
                                                ParagraphType::Code(e) => {
                                                    *base.add(0).cast::<u8>() = (2i32) as u8;
                                                    let CodeSpan { action: action33, lines: lines33, range: range33 } = e;
                                                    match action33 {
                                                        CodeAction::Highlight(e) => {
                                                            *base.add(4).cast::<u8>() = (0i32) as u8;
                                                            let CodeHighlight { language: language34, range: range34 } = e;
                                                            let vec35 = (language34.into_bytes()).into_boxed_slice();
                                                            let ptr35 = vec35.as_ptr().cast::<u8>();
                                                            let len35 = vec35.len();
                                                            ::core::mem::forget(vec35);
                                                            *base.add(12).cast::<usize>() = len35;
                                                            *base.add(8).cast::<*mut u8>() = ptr35.cast_mut();
                                                            let super::super::super::super::exports::notedown::core::types::TextRange {
                                                                head_offset: head_offset36,
                                                                tail_offset: tail_offset36,
                                                            } = range34;
                                                            *base.add(16).cast::<i32>() = _rt::as_i32(head_offset36);
                                                            *base.add(20).cast::<i32>() = _rt::as_i32(tail_offset36);
                                                        }
                                                    }
                                                    let vec37 = (lines33.into_bytes()).into_boxed_slice();
                                                    let ptr37 = vec37.as_ptr().cast::<u8>();
                                                    let len37 = vec37.len();
                                                    ::core::mem::forget(vec37);
                                                    *base.add(28).cast::<usize>() = len37;
                                                    *base.add(24).cast::<*mut u8>() = ptr37.cast_mut();
                                                    let super::super::super::super::exports::notedown::core::types::TextRange {
                                                        head_offset: head_offset38,
                                                        tail_offset: tail_offset38,
                                                    } = range33;
                                                    *base.add(32).cast::<i32>() = _rt::as_i32(head_offset38);
                                                    *base.add(36).cast::<i32>() = _rt::as_i32(tail_offset38);
                                                }
                                            }
                                            let super::super::super::super::exports::notedown::core::types::TextRange {
                                                head_offset: head_offset39,
                                                tail_offset: tail_offset39,
                                            } = range26;
                                            *base.add(40).cast::<i32>() = _rt::as_i32(head_offset39);
                                            *base.add(44).cast::<i32>() = _rt::as_i32(tail_offset39);
                                        }
                                    }
                                    *base.add(8).cast::<usize>() = len40;
                                    *base.add(4).cast::<*mut u8>() = result40;
                                    let super::super::super::super::exports::notedown::core::types::TextRange {
                                        head_offset: head_offset41,
                                        tail_offset: tail_offset41,
                                    } = range25;
                                    *base.add(12).cast::<i32>() = _rt::as_i32(head_offset41);
                                    *base.add(16).cast::<i32>() = _rt::as_i32(tail_offset41);
                                }
                                BlockType::SpaceBreak(e) => {
                                    *base.add(0).cast::<u8>() = (3i32) as u8;
                                    let BreaklineBlock { lines: lines42, range: range42 } = e;
                                    *base.add(4).cast::<i32>() = _rt::as_i32(lines42);
                                    let super::super::super::super::exports::notedown::core::types::TextRange {
                                        head_offset: head_offset43,
                                        tail_offset: tail_offset43,
                                    } = range42;
                                    *base.add(8).cast::<i32>() = _rt::as_i32(head_offset43);
                                    *base.add(12).cast::<i32>() = _rt::as_i32(tail_offset43);
                                }
                                BlockType::CodeBlock(e) => {
                                    *base.add(0).cast::<u8>() = (4i32) as u8;
                                    let CodeSpan { action: action44, lines: lines44, range: range44 } = e;
                                    match action44 {
                                        CodeAction::Highlight(e) => {
                                            *base.add(4).cast::<u8>() = (0i32) as u8;
                                            let CodeHighlight { language: language45, range: range45 } = e;
                                            let vec46 = (language45.into_bytes()).into_boxed_slice();
                                            let ptr46 = vec46.as_ptr().cast::<u8>();
                                            let len46 = vec46.len();
                                            ::core::mem::forget(vec46);
                                            *base.add(12).cast::<usize>() = len46;
                                            *base.add(8).cast::<*mut u8>() = ptr46.cast_mut();
                                            let super::super::super::super::exports::notedown::core::types::TextRange {
                                                head_offset: head_offset47,
                                                tail_offset: tail_offset47,
                                            } = range45;
                                            *base.add(16).cast::<i32>() = _rt::as_i32(head_offset47);
                                            *base.add(20).cast::<i32>() = _rt::as_i32(tail_offset47);
                                        }
                                    }
                                    let vec48 = (lines44.into_bytes()).into_boxed_slice();
                                    let ptr48 = vec48.as_ptr().cast::<u8>();
                                    let len48 = vec48.len();
                                    ::core::mem::forget(vec48);
                                    *base.add(28).cast::<usize>() = len48;
                                    *base.add(24).cast::<*mut u8>() = ptr48.cast_mut();
                                    let super::super::super::super::exports::notedown::core::types::TextRange {
                                        head_offset: head_offset49,
                                        tail_offset: tail_offset49,
                                    } = range44;
                                    *base.add(32).cast::<i32>() = _rt::as_i32(head_offset49);
                                    *base.add(36).cast::<i32>() = _rt::as_i32(tail_offset49);
                                }
                                BlockType::MathBlock(e) => {
                                    *base.add(0).cast::<u8>() = (5i32) as u8;
                                    let MathSpan { display: display50, content: content50, range: range50 } = e;
                                    match display50 {
                                        MathDisplay::Inline => {
                                            *base.add(4).cast::<u8>() = (0i32) as u8;
                                        }
                                        MathDisplay::Block => {
                                            *base.add(4).cast::<u8>() = (1i32) as u8;
                                        }
                                    }
                                    match content50 {
                                        MathContent::Mathml(e) => {
                                            *base.add(8).cast::<u8>() = (0i32) as u8;
                                            let vec51 = (e.into_bytes()).into_boxed_slice();
                                            let ptr51 = vec51.as_ptr().cast::<u8>();
                                            let len51 = vec51.len();
                                            ::core::mem::forget(vec51);
                                            *base.add(16).cast::<usize>() = len51;
                                            *base.add(12).cast::<*mut u8>() = ptr51.cast_mut();
                                        }
                                        MathContent::Tex(e) => {
                                            *base.add(8).cast::<u8>() = (1i32) as u8;
                                            let vec52 = (e.into_bytes()).into_boxed_slice();
                                            let ptr52 = vec52.as_ptr().cast::<u8>();
                                            let len52 = vec52.len();
                                            ::core::mem::forget(vec52);
                                            *base.add(16).cast::<usize>() = len52;
                                            *base.add(12).cast::<*mut u8>() = ptr52.cast_mut();
                                        }
                                        MathContent::Asciimath(e) => {
                                            *base.add(8).cast::<u8>() = (2i32) as u8;
                                            let vec53 = (e.into_bytes()).into_boxed_slice();
                                            let ptr53 = vec53.as_ptr().cast::<u8>();
                                            let len53 = vec53.len();
                                            ::core::mem::forget(vec53);
                                            *base.add(16).cast::<usize>() = len53;
                                            *base.add(12).cast::<*mut u8>() = ptr53.cast_mut();
                                        }
                                    }
                                    let super::super::super::super::exports::notedown::core::types::TextRange {
                                        head_offset: head_offset54,
                                        tail_offset: tail_offset54,
                                    } = range50;
                                    *base.add(20).cast::<i32>() = _rt::as_i32(head_offset54);
                                    *base.add(24).cast::<i32>() = _rt::as_i32(tail_offset54);
                                }
                            }
                            let super::super::super::super::exports::notedown::core::types::TextRange {
                                head_offset: head_offset55,
                                tail_offset: tail_offset55,
                            } = range3;
                            *base.add(40).cast::<i32>() = _rt::as_i32(head_offset55);
                            *base.add(44).cast::<i32>() = _rt::as_i32(tail_offset55);
                        }
                    }
                    *ptr1.add(4).cast::<usize>() = len56;
                    *ptr1.add(0).cast::<*mut u8>() = result56;
                    match path2 {
                        Some(e) => {
                            *ptr1.add(8).cast::<u8>() = (1i32) as u8;
                            *ptr1.add(12).cast::<i32>() = (e).take_handle() as i32;
                        }
                        None => {
                            *ptr1.add(8).cast::<u8>() = (0i32) as u8;
                        }
                    };
                    ptr1
                }

                #[doc(hidden)]
                #[allow(non_snake_case)]
                pub unsafe fn __post_return_hack_unused<T: Guest>(arg0: *mut u8) {
                    let l49 = *arg0.add(0).cast::<*mut u8>();
                    let l50 = *arg0.add(4).cast::<usize>();
                    let base51 = l49;
                    let len51 = l50;
                    for i in 0..len51 {
                        let base = base51.add(i * 48);
                        {
                            let l0 = i32::from(*base.add(0).cast::<u8>());
                            match l0 {
                                0 => {
                                    let l16 = *base.add(8).cast::<*mut u8>();
                                    let l17 = *base.add(12).cast::<usize>();
                                    let base18 = l16;
                                    let len18 = l17;
                                    for i in 0..len18 {
                                        let base = base18.add(i * 48);
                                        {
                                            let l1 = i32::from(*base.add(0).cast::<u8>());
                                            match l1 {
                                                0 => {
                                                    let l2 = *base.add(4).cast::<*mut u8>();
                                                    let l3 = *base.add(8).cast::<usize>();
                                                    _rt::cabi_dealloc(l2, l3, 1);
                                                }
                                                1 => {
                                                    let l4 = i32::from(*base.add(8).cast::<u8>());
                                                    match l4 {
                                                        0 => {
                                                            let l5 = *base.add(12).cast::<*mut u8>();
                                                            let l6 = *base.add(16).cast::<usize>();
                                                            _rt::cabi_dealloc(l5, l6, 1);
                                                        }
                                                        1 => {
                                                            let l7 = *base.add(12).cast::<*mut u8>();
                                                            let l8 = *base.add(16).cast::<usize>();
                                                            _rt::cabi_dealloc(l7, l8, 1);
                                                        }
                                                        _ => {
                                                            let l9 = *base.add(12).cast::<*mut u8>();
                                                            let l10 = *base.add(16).cast::<usize>();
                                                            _rt::cabi_dealloc(l9, l10, 1);
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    let l11 = i32::from(*base.add(4).cast::<u8>());
                                                    match l11 {
                                                        _ => {
                                                            let l12 = *base.add(8).cast::<*mut u8>();
                                                            let l13 = *base.add(12).cast::<usize>();
                                                            _rt::cabi_dealloc(l12, l13, 1);
                                                        }
                                                    }
                                                    let l14 = *base.add(24).cast::<*mut u8>();
                                                    let l15 = *base.add(28).cast::<usize>();
                                                    _rt::cabi_dealloc(l14, l15, 1);
                                                }
                                            }
                                        }
                                    }
                                    _rt::cabi_dealloc(base18, len18 * 48, 4);
                                }
                                1 => (),
                                2 => {
                                    let l34 = *base.add(4).cast::<*mut u8>();
                                    let l35 = *base.add(8).cast::<usize>();
                                    let base36 = l34;
                                    let len36 = l35;
                                    for i in 0..len36 {
                                        let base = base36.add(i * 48);
                                        {
                                            let l19 = i32::from(*base.add(0).cast::<u8>());
                                            match l19 {
                                                0 => {
                                                    let l20 = *base.add(4).cast::<*mut u8>();
                                                    let l21 = *base.add(8).cast::<usize>();
                                                    _rt::cabi_dealloc(l20, l21, 1);
                                                }
                                                1 => {
                                                    let l22 = i32::from(*base.add(8).cast::<u8>());
                                                    match l22 {
                                                        0 => {
                                                            let l23 = *base.add(12).cast::<*mut u8>();
                                                            let l24 = *base.add(16).cast::<usize>();
                                                            _rt::cabi_dealloc(l23, l24, 1);
                                                        }
                                                        1 => {
                                                            let l25 = *base.add(12).cast::<*mut u8>();
                                                            let l26 = *base.add(16).cast::<usize>();
                                                            _rt::cabi_dealloc(l25, l26, 1);
                                                        }
                                                        _ => {
                                                            let l27 = *base.add(12).cast::<*mut u8>();
                                                            let l28 = *base.add(16).cast::<usize>();
                                                            _rt::cabi_dealloc(l27, l28, 1);
                                                        }
                                                    }
                                                }
                                                _ => {
                                                    let l29 = i32::from(*base.add(4).cast::<u8>());
                                                    match l29 {
                                                        _ => {
                                                            let l30 = *base.add(8).cast::<*mut u8>();
                                                            let l31 = *base.add(12).cast::<usize>();
                                                            _rt::cabi_dealloc(l30, l31, 1);
                                                        }
                                                    }
                                                    let l32 = *base.add(24).cast::<*mut u8>();
                                                    let l33 = *base.add(28).cast::<usize>();
                                                    _rt::cabi_dealloc(l32, l33, 1);
                                                }
                                            }
                                        }
                                    }
                                    _rt::cabi_dealloc(base36, len36 * 48, 4);
                                }
                                3 => (),
                                4 => {
                                    let l37 = i32::from(*base.add(4).cast::<u8>());
                                    match l37 {
                                        _ => {
                                            let l38 = *base.add(8).cast::<*mut u8>();
                                            let l39 = *base.add(12).cast::<usize>();
                                            _rt::cabi_dealloc(l38, l39, 1);
                                        }
                                    }
                                    let l40 = *base.add(24).cast::<*mut u8>();
                                    let l41 = *base.add(28).cast::<usize>();
                                    _rt::cabi_dealloc(l40, l41, 1);
                                }
                                _ => {
                                    let l42 = i32::from(*base.add(8).cast::<u8>());
                                    match l42 {
                                        0 => {
                                            let l43 = *base.add(12).cast::<*mut u8>();
                                            let l44 = *base.add(16).cast::<usize>();
                                            _rt::cabi_dealloc(l43, l44, 1);
                                        }
                                        1 => {
                                            let l45 = *base.add(12).cast::<*mut u8>();
                                            let l46 = *base.add(16).cast::<usize>();
                                            _rt::cabi_dealloc(l45, l46, 1);
                                        }
                                        _ => {
                                            let l47 = *base.add(12).cast::<*mut u8>();
                                            let l48 = *base.add(16).cast::<usize>();
                                            _rt::cabi_dealloc(l47, l48, 1);
                                        }
                                    }
                                }
                            }
                        }
                    }
                    _rt::cabi_dealloc(base51, len51 * 48, 4);
                }

                pub trait Guest {
                    fn hack_unused() -> NotedownRoot;
                }
                #[doc(hidden)]

                macro_rules! __export_notedown_core_syntax_tree_0_1_0_cabi {
        ($ty:ident with_types_in $($path_to_types:tt)*) => (const _: () = {

          #[export_name = "notedown:core/syntax-tree@0.1.0#hack-unused"]
          unsafe extern "C" fn export_hack_unused() -> *mut u8 {
            $($path_to_types)*::_export_hack_unused_cabi::<$ty>()
          }
          #[export_name = "cabi_post_notedown:core/syntax-tree@0.1.0#hack-unused"]
          unsafe extern "C" fn _post_return_hack_unused(arg0: *mut u8,) {
            $($path_to_types)*::__post_return_hack_unused::<$ty>(arg0)
          }
        };);
      }
                #[doc(hidden)]
                pub(crate) use __export_notedown_core_syntax_tree_0_1_0_cabi;

                #[repr(align(4))]
                struct _RetArea([::core::mem::MaybeUninit<u8>; 16]);

                static mut _RET_AREA: _RetArea = _RetArea([::core::mem::MaybeUninit::uninit(); 16]);
            }
        }
    }
}
mod _rt {
    use core::{
        fmt, marker,
        sync::atomic::{AtomicU32, Ordering::Relaxed},
    };

    /// A type which represents a component model resource, either imported or
    /// exported into this component.
    ///
    /// This is a low-level wrapper which handles the lifetime of the resource
    /// (namely this has a destructor). The `T` provided defines the component
    /// model intrinsics that this wrapper uses.
    ///
    /// One of the chief purposes of this type is to provide `Deref`
    /// implementations to access the underlying data when it is owned.
    ///
    /// This type is primarily used in generated code for exported and imported
    /// resources.
    #[repr(transparent)]
    pub struct Resource<T: WasmResource> {
        // NB: This would ideally be `u32` but it is not. The fact that this has
        // interior mutability is not exposed in the API of this type except for the
        // `take_handle` method which is supposed to in theory be private.
        //
        // This represents, almost all the time, a valid handle value. When it's
        // invalid it's stored as `u32::MAX`.
        handle: AtomicU32,
        _marker: marker::PhantomData<T>,
    }

    /// A trait which all wasm resources implement, namely providing the ability
    /// to drop a resource.
    ///
    /// This generally is implemented by generated code, not user-facing code.
    pub unsafe trait WasmResource {
        /// Invokes the `[resource-drop]...` intrinsic.
        unsafe fn drop(handle: u32);
    }

    impl<T: WasmResource> Resource<T> {
        #[doc(hidden)]
        pub unsafe fn from_handle(handle: u32) -> Self {
            debug_assert!(handle != u32::MAX);
            Self { handle: AtomicU32::new(handle), _marker: marker::PhantomData }
        }

        /// Takes ownership of the handle owned by `resource`.
        ///
        /// Note that this ideally would be `into_handle` taking `Resource<T>`
        /// by ownership. The code generator does not enable that in all
        /// situations, unfortunately, so this is provided instead.
        ///
        /// Also note that `take_handle` is in theory only ever called on values
        /// owned by a generated function. For example a generated function
        /// might take `Resource<T>` as an argument but then call
        /// `take_handle` on a reference to that argument. In that sense
        /// the dynamic nature of `take_handle` should only be exposed
        /// internally to generated code, not to user code.
        #[doc(hidden)]
        pub fn take_handle(resource: &Resource<T>) -> u32 {
            resource.handle.swap(u32::MAX, Relaxed)
        }

        #[doc(hidden)]
        pub fn handle(resource: &Resource<T>) -> u32 {
            resource.handle.load(Relaxed)
        }
    }

    impl<T: WasmResource> fmt::Debug for Resource<T> {
        fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
            f.debug_struct("Resource").field("handle", &self.handle).finish()
        }
    }

    impl<T: WasmResource> Drop for Resource<T> {
        fn drop(&mut self) {
            unsafe {
                match self.handle.load(Relaxed) {
                    // If this handle was "taken" then don't do anything in the
                    // destructor.
                    u32::MAX => {}

                    // ... but otherwise do actually destroy it with the imported
                    // component model intrinsic as defined through `T`.
                    other => T::drop(other),
                }
            }
        }
    }

    pub use alloc_crate::{boxed::Box, string::String, vec::Vec};

    #[cfg(target_arch = "wasm32")]
    pub fn run_ctors_once() {
        wit_bindgen::rt::run_ctors_once();
    }

    pub fn as_i32<T: AsI32>(t: T) -> i32 {
        t.as_i32()
    }

    pub trait AsI32 {
        fn as_i32(self) -> i32;
    }

    impl<'a, T: Copy + AsI32> AsI32 for &'a T {
        fn as_i32(self) -> i32 {
            (*self).as_i32()
        }
    }

    impl AsI32 for i32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u32 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for i16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u16 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for i8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for u8 {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for char {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    impl AsI32 for usize {
        #[inline]
        fn as_i32(self) -> i32 {
            self as i32
        }
    }

    pub use alloc_crate::alloc;

    pub unsafe fn cabi_dealloc(ptr: *mut u8, size: usize, align: usize) {
        if size == 0 {
            return;
        }
        let layout = alloc::Layout::from_size_align_unchecked(size, align);
        alloc::dealloc(ptr as *mut u8, layout);
    }

    extern crate alloc as alloc_crate;
}

/// Generates `#[no_mangle]` functions to export the specified type as the
/// root implementation of all generated traits.
///
/// For more information see the documentation of `wit_bindgen::generate!`.
///
/// ```rust
/// # macro_rules! export{ ($($t:tt)*) => (); }
/// # trait Guest {}
/// struct MyType;
///
/// impl Guest for MyType {
///     // ...
/// }
///
/// export!(MyType);
/// ```
#[allow(unused_macros)]
#[doc(hidden)]

macro_rules! __export_host_impl {
  ($ty:ident) => (self::export!($ty with_types_in self););
  ($ty:ident with_types_in $($path_to_types_root:tt)*) => (
  $($path_to_types_root)*::exports::notedown::core::types::__export_notedown_core_types_0_1_0_cabi!($ty with_types_in $($path_to_types_root)*::exports::notedown::core::types);
  $($path_to_types_root)*::exports::notedown::core::syntax_tree::__export_notedown_core_syntax_tree_0_1_0_cabi!($ty with_types_in $($path_to_types_root)*::exports::notedown::core::syntax_tree);
  )
}
#[doc(inline)]
pub(crate) use __export_host_impl as export;

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:wit-bindgen:0.23.0:host:encoded world"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 1071] = *b"\
\0asm\x0d\0\x01\0\0\x19\x16wit-component-encoding\x04\0\x07\xb4\x07\x01A\x02\x01\
A\x06\x01B\x03\x04\0\x03url\x03\x01\x01r\x02\x0bhead-offsety\x0btail-offsety\x04\
\0\x0atext-range\x03\0\x01\x04\x01\x19notedown:core/types@0.1.0\x05\0\x02\x03\0\0\
\x0atext-range\x02\x03\0\0\x03url\x01B*\x02\x03\x02\x01\x01\x04\0\x0atext-range\x03\
\0\0\x02\x03\x02\x01\x02\x04\0\x03url\x03\0\x02\x01r\x02\x05linesy\x05range\x01\x04\
\0\x0fhorizontal-rule\x03\0\x04\x01r\x02\x05linesy\x05range\x01\x04\0\x0fbreakli\
ne-block\x03\0\x06\x01r\x02\x05spaces\x05range\x01\x04\0\x0cspace-inline\x03\0\x08\
\x01r\x02\x08languages\x05range\x01\x04\0\x0ecode-highlight\x03\0\x0a\x01q\x01\x09\
highlight\x01\x0b\0\x04\0\x0bcode-action\x03\0\x0c\x01r\x03\x06action\x0d\x05lin\
ess\x05range\x01\x04\0\x09code-span\x03\0\x0e\x01q\x02\x06inline\0\0\x05block\0\0\
\x04\0\x0cmath-display\x03\0\x10\x01q\x03\x06mathml\x01s\0\x03tex\x01s\0\x09asci\
imath\x01s\0\x04\0\x0cmath-content\x03\0\x12\x01r\x03\x07display\x11\x07content\x13\
\x05range\x01\x04\0\x09math-span\x03\0\x14\x01q\x03\x04text\x01s\0\x04math\x01\x15\
\0\x04code\x01\x0f\0\x04\0\x0eparagraph-type\x03\0\x16\x01r\x02\x04type\x17\x05r\
ange\x01\x04\0\x0eparagraph-term\x03\0\x18\x01p\x19\x01r\x02\x05terms\x1a\x05ran\
ge\x01\x04\0\x0fparagraph-block\x03\0\x1b\x01r\x03\x05levely\x05title\x1c\x05ran\
ge\x01\x04\0\x0dheading-block\x03\0\x1d\x01q\x06\x07heading\x01\x1e\0\x0fhorizon\
tal-rule\x01\x05\0\x09paragraph\x01\x1c\0\x0bspace-break\x01\x07\0\x0acode-block\
\x01\x0f\0\x0amath-block\x01\x15\0\x04\0\x0ablock-type\x03\0\x1f\x01r\x02\x04typ\
e\x20\x05range\x01\x04\0\x0enotedown-block\x03\0!\x01p\"\x01i\x03\x01k$\x01r\x02\
\x06blocks#\x04path%\x04\0\x0dnotedown-root\x03\0&\x01@\0\0'\x04\0\x0bhack-unuse\
d\x01(\x04\x01\x1fnotedown:core/syntax-tree@0.1.0\x05\x03\x04\x01\x18notedown:co\
re/host@0.1.0\x04\0\x0b\x0a\x01\0\x04host\x03\0\0\0G\x09producers\x01\x0cprocess\
ed-by\x02\x0dwit-component\x070.202.0\x10wit-bindgen-rust\x060.23.0";

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_custom_section_describing_imports() {
    wit_bindgen::rt::maybe_link_cabi_realloc();
}
